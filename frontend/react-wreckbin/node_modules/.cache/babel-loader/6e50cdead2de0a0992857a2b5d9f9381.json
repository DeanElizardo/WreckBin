{"ast":null,"code":"import axios from 'axios';\nexport let baseUrl = 'https://5569-2600-1700-8151-30b0-3574-4785-2bde-ac58.ngrok.io';\n/**\n * Send request to /uuid to get a token (userId)\n * @returns {string} token  \n */\n\nexport const createUserId = async () => {\n  try {\n    const response = await axios.post(`${baseUrl}/users/uuid`);\n    return response.data.userId;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\n/**\n * Get token stored in local storage \n */\n\nexport const getTokenFromLocalStorage = () => {\n  return window.localStorage.getItem('wreckbin-app-userId');\n};\n/**\n * Set token in local storage \n */\n\nexport const setTokenInLocalStorage = token => {\n  // if we don't have a token \n  window.localStorage.setItem('wreckbin-app-userId', token);\n};\n/**\n * Get all bins associated with userID (token)\n * @returns {Array.<Object>} bins \n */\n\nexport const getAllBins = async () => {\n  try {\n    let token = getTokenFromLocalStorage();\n    console.log('Token', token);\n    const response = await axios.get(`${baseUrl}/users/${token}`, {\n      headers: {\n        'ngrok-skip-browser-warning': true\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const getSpecificBin = async (binID, token) => {\n  try {\n    let response = await axios.get(`${baseUrl}/${token}/${binID}`, {\n      headers: {\n        'ngrok-skip-browser-warning': true\n      }\n    });\n    console.log(response.data);\n    return response.data.binID;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createBin = async token => {\n  try {\n    let response = await axios.post(`${baseUrl}/users/${token}/new`);\n    return response.data.binID;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createBinURL = _ref => {\n  let {\n    binId\n  } = _ref;\n  return `${baseUrl}/record/${binId}`;\n}; // const deletePerson = (id) => {\n//     let request = axios.delete(`${baseUrl}/${id}`);\n//     return request.then(response => response.data);\n// }\n// export default { getAllBins, getSpecificBin, createBin };\n\n/**\nReminders \nwreckestbin.com/      home page \n                      create a new token \n                      Create Authorization: token (put in local storage)\n--------------------------------------------------------------------------\n\n/users/uuid \n/users/:userId                          get all bins associated with user id \n/users/:userId/:binId                   get all requests associated with bin \n/users/:userId/:binId/:requestId        view individual request\n/users/:userId/new                      create a new bin \n\n*/","map":{"version":3,"names":["axios","baseUrl","createUserId","response","post","data","userId","err","console","error","message","getTokenFromLocalStorage","window","localStorage","getItem","setTokenInLocalStorage","token","setItem","getAllBins","log","get","headers","getSpecificBin","binID","createBin","createBinURL","binId"],"sources":["/home/del/Code/WreckBin/frontend/react-wreckbin/src/services/bins.js"],"sourcesContent":["import axios from 'axios'\n\n\nexport let baseUrl = 'https://5569-2600-1700-8151-30b0-3574-4785-2bde-ac58.ngrok.io'; \n\n\n/**\n * Send request to /uuid to get a token (userId)\n * @returns {string} token  \n */\nexport const createUserId = async () => {\n  try {\n    const response = await axios.post(`${baseUrl}/users/uuid`); \n    return response.data.userId; \n    \n  } catch (err) {\n    console.error(err.message)\n  }\n};\n\n/**\n * Get token stored in local storage \n */\nexport const getTokenFromLocalStorage = () => {\n  return window.localStorage.getItem('wreckbin-app-userId');\n}\n\n/**\n * Set token in local storage \n */\nexport const setTokenInLocalStorage = (token) => {\n  // if we don't have a token \n  window.localStorage.setItem('wreckbin-app-userId', token);\n};\n\n\n/**\n * Get all bins associated with userID (token)\n * @returns {Array.<Object>} bins \n */\nexport const getAllBins = async () => {\n\n  try {\n      let token = getTokenFromLocalStorage();\n      console.log('Token', token)\n      const response = await axios.get(`${baseUrl}/users/${token}`, {\n        headers: {\n          'ngrok-skip-browser-warning': true\n        }\n      });\n      \n      return response.data; \n    } catch (err) {\n    console.error(err.message); \n  }\n};\n\nexport const getSpecificBin = async (binID, token) => {\n  try {\n    let response = await axios.get(`${baseUrl}/${token}/${binID}`, {\n      headers: {\n        'ngrok-skip-browser-warning': true\n      }\n    });\n    console.log(response.data);\n    return response.data.binID;\n  } catch (err) {\n    console.error(err.message)\n  }\n};\n\nexport const createBin = async (token) => {\n  try {\n    let response = await axios.post(`${baseUrl}/users/${token}/new`);\n    return response.data.binID;\n  } catch (err) {\n    console.error(err.message);\n  }\n};\n\nexport const createBinURL = ({ binId }) => {\n  return `${baseUrl}/record/${binId}`; \n}; \n\n\n\n\n\n\n\n\n\n\n\n\n// const deletePerson = (id) => {\n//     let request = axios.delete(`${baseUrl}/${id}`);\n//     return request.then(response => response.data);\n// }\n\n\n// export default { getAllBins, getSpecificBin, createBin };\n\n\n\n/**\nReminders \nwreckestbin.com/      home page \n                      create a new token \n                      Create Authorization: token (put in local storage)\n--------------------------------------------------------------------------\n\n/users/uuid \n/users/:userId                          get all bins associated with user id \n/users/:userId/:binId                   get all requests associated with bin \n/users/:userId/:binId/:requestId        view individual request\n/users/:userId/new                      create a new bin \n\n*/\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAO,IAAIC,OAAO,GAAG,+DAAd;AAGP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,YAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAY,GAAEH,OAAQ,aAAtB,CAAvB;IACA,OAAOE,QAAQ,CAACE,IAAT,CAAcC,MAArB;EAED,CAJD,CAIE,OAAOC,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CARM;AAUP;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,MAAM;EAC5C,OAAOC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,qBAA5B,CAAP;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;EAC/C;EACAJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,qBAA5B,EAAmDD,KAAnD;AACD,CAHM;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAME,UAAU,GAAG,YAAY;EAEpC,IAAI;IACA,IAAIF,KAAK,GAAGL,wBAAwB,EAApC;IACAH,OAAO,CAACW,GAAR,CAAY,OAAZ,EAAqBH,KAArB;IACA,MAAMb,QAAQ,GAAG,MAAMH,KAAK,CAACoB,GAAN,CAAW,GAAEnB,OAAQ,UAASe,KAAM,EAApC,EAAuC;MAC5DK,OAAO,EAAE;QACP,8BAA8B;MADvB;IADmD,CAAvC,CAAvB;IAMA,OAAOlB,QAAQ,CAACE,IAAhB;EACD,CAVH,CAUI,OAAOE,GAAP,EAAY;IACdC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CAfM;AAiBP,OAAO,MAAMY,cAAc,GAAG,OAAOC,KAAP,EAAcP,KAAd,KAAwB;EACpD,IAAI;IACF,IAAIb,QAAQ,GAAG,MAAMH,KAAK,CAACoB,GAAN,CAAW,GAAEnB,OAAQ,IAAGe,KAAM,IAAGO,KAAM,EAAvC,EAA0C;MAC7DF,OAAO,EAAE;QACP,8BAA8B;MADvB;IADoD,CAA1C,CAArB;IAKAb,OAAO,CAACW,GAAR,CAAYhB,QAAQ,CAACE,IAArB;IACA,OAAOF,QAAQ,CAACE,IAAT,CAAckB,KAArB;EACD,CARD,CAQE,OAAOhB,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CAZM;AAcP,OAAO,MAAMc,SAAS,GAAG,MAAOR,KAAP,IAAiB;EACxC,IAAI;IACF,IAAIb,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAY,GAAEH,OAAQ,UAASe,KAAM,MAArC,CAArB;IACA,OAAOb,QAAQ,CAACE,IAAT,CAAckB,KAArB;EACD,CAHD,CAGE,OAAOhB,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;EACD;AACF,CAPM;AASP,OAAO,MAAMe,YAAY,GAAG,QAAe;EAAA,IAAd;IAAEC;EAAF,CAAc;EACzC,OAAQ,GAAEzB,OAAQ,WAAUyB,KAAM,EAAlC;AACD,CAFM,C,CAeP;AACA;AACA;AACA;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}